// This is an autogenerated file from running `firebase genkit:flow`.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating investment portfolio recommendations based on user risk profile and financial goals.
 *
 * The flow takes user's risk profile and financial goals as input and returns a tailored investment portfolio recommendation.
 *
 * - portfolioRecommendation - The main function to trigger the portfolio recommendation flow.
 * - PortfolioRecommendationInput - The input type for the portfolioRecommendation function.
 * - PortfolioRecommendationOutput - The output type for the portfolioRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PortfolioRecommendationInputSchema = z.object({
  riskProfile: z
    .string()
    .describe(
      'The risk profile of the user (e.g., conservative, moderate, aggressive).'
    ),
  financialGoals: z
    .string()
    .describe(
      'The financial goals of the user (e.g., retirement, buying a house, saving for education).'
    ),
  investmentAmount: z
    .number()
    .describe('The amount of money the user wants to invest.'),
  investmentTimeHorizon: z
    .string()
    .describe(
      'The investment time horizon of the user (e.g., short-term, medium-term, long-term).'
    ),
});

export type PortfolioRecommendationInput = z.infer<
  typeof PortfolioRecommendationInputSchema
>;

const PortfolioRecommendationOutputSchema = z.object({
  portfolioRecommendation: z.string().describe('The recommended investment portfolio.'),
  reasoning: z.string().describe('The reasoning behind the recommendation.'),
});

export type PortfolioRecommendationOutput = z.infer<
  typeof PortfolioRecommendationOutputSchema
>;

export async function portfolioRecommendation(
  input: PortfolioRecommendationInput
): Promise<PortfolioRecommendationOutput> {
  return portfolioRecommendationFlow(input);
}

const portfolioRecommendationPrompt = ai.definePrompt({
  name: 'portfolioRecommendationPrompt',
  input: {schema: PortfolioRecommendationInputSchema},
  output: {schema: PortfolioRecommendationOutputSchema},
  prompt: `You are an expert financial advisor. Based on the user's risk profile, financial goals, investment amount and investment time horizon, recommend an investment portfolio.

Risk Profile: {{{riskProfile}}}
Financial Goals: {{{financialGoals}}}
Investment Amount: {{{investmentAmount}}}
Investment Time Horizon: {{{investmentTimeHorizon}}}

Portfolio Recommendation:`,
});

const portfolioRecommendationFlow = ai.defineFlow(
  {
    name: 'portfolioRecommendationFlow',
    inputSchema: PortfolioRecommendationInputSchema,
    outputSchema: PortfolioRecommendationOutputSchema,
  },
  async input => {
    const {output} = await portfolioRecommendationPrompt(input);
    return output!;
  }
);
